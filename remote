#!/bin/bash
# 
# Hack of a script to try and make it easier to manage users on remote servers
#
# TODO: easy way to add keys to alternate accounts? 
#       maybe if the 3rd arg were "also" or something, 
#       then we assume all args to follow to be alternate accts to add the key to
#
# TODO: handle command variations, eg: useradd, adduser, etc.. 

# Directory holding the pub keys, expecting them to be named <user>.pub
KEYDIR=~/keys
# Alternate accounts to check when disabling the user's keys
ALTERNATE_ACCTS=(root) # deploy foo bar baz
# Make this something interesting for a temporary password
# or replace with your favorite password generator
PW="Ch@ngeMe! ${RANDOM} ${USER}"

USER=$1
SERVER=$2
OPTIONAL=$3
TIME=$(date +'%s')

if [ -z "${USER}" ] || [ -z "${SERVER}" ]; then
  echo
  echo "USAGE: $0 <user> <server> [disable|delete|enable]"
  echo
  echo "without optional 3rd argmuent, will create specified user's account on"
  echo "the server and add set up their ssh pub key for them if we have it."
  echo
  echo "Currently looking for ssh public keys in: ${KEYDIR}"
  echo "edit ${0} to change this location"
  echo
  echo "optional 3rd argument:"
  echo "    disable = locks their password and moves their ssh credentials"
  echo "    enable  = resets their password and moves their ssh credentials back"
  echo "    delete  = completely removes their account"
  echo
  exit 1
fi

case "$OPTIONAL" in
  "");;
  "delete")
      echo
      echo "Please confirm you really do want to DELETE the ${USER} account on ${SERVER}"
      echo "Note, this removes their home directory as well! You may want to double check that there's nothing in there of importance."
      read -p "Type 'proceed' to confirm: " confirmation
      if [ "$confirmation" == "proceed" ]; then
        echo "ok"
        ssh root@${SERVER} "[[ -d /home/${USER} ]] && /usr/sbin/userdel -rf ${USER}" 
        ssh root@${SERVER} "[[ ! -d /home/${USER} ]] && echo '${USER} deleted.' || echo \"Failed to delete ${USER} on ${SERVER}\""
      else
        echo "ok, no harm done."
      fi
      exit
  ;;

  "disable")
      echo
      echo "Please confirm I'm not crazy and you really did want to DISABLE the ${USER} account on ${SERVER}"
      read -p "Type 'yes' to confirm: " confirmation
      if [ "$confirmation" == "yes" ]; then
        echo "checking for running processes.. "
        RUNNING=$(ssh root@${SERVER} "pgrep -lfu $USER|wc -l") 
        if [ "${RUNNING}" != "0" ]; then
          ssh root@${SERVER} "pgrep -lfu $USER" 
          read -p "Kill these ${RUNNING} running processes? " killem
          if [ "${killem:0:1}" = [yY] ]; then
            echo "killing running processes"
            ssh root@${SERVER} "pkill -TERM -u $USER && sleep 5 && pkill -KILL -u $USER" 
          else
            echo "leaving the processes alone"
          fi
        else
          echo "none found, good."
        fi

        ssh root@${SERVER} "[[ -d ~${USER}/.ssh ]] && mv -f ~${USER}/.ssh ~${USER}/.ssh_disabled" 
        ssh root@${SERVER} "passwd -l ${USER}" 

        for acct in $ALTERNATE_ACCTS; do
          [[ "${acct}" = "root" ]] && DIR=/root || DIR=/home/${acct}
          FOUND=$(ssh root@${SERVER} "[[ -d ${DIR} ]]")
          if [ "$?" = "1" ]; then
            echo "${DIR} not found on ${SERVER}, skipping"
            continue
          fi
          ALTKEYS=$(ssh root@${SERVER} "[[ -f ~${USER}/.ssh_disabled/authorized_keys ]] && grep -f ~${USER}/.ssh_disabled/authorized_keys ${DIR}/.ssh/authorized_keys")
          if [ "$?" = "0" ]; then
            echo "Found matching keys in ${DIR}/.ssh/authorized_keys, disabling.."
            ssh root@${SERVER} "grep -vf ~${USER}/.ssh_disabled/authorized_keys ${DIR}/.ssh/authorized_keys > ${DIR}/.ssh/${TIME}_auth && \
                                mv -f ${DIR}/.ssh/authorized_keys ${DIR}/.ssh/authorized_keys_disabled_${USER}_${TIME} && \
                                mv -f ${DIR}/.ssh/${TIME}_auth ${DIR}/.ssh/authorized_keys" 
            echo "disabled, moved ${acct}'s original authorized_keys file to ${DIR}/.ssh/authorized_keys_disabled_${USER}_${TIME}"
          else
            echo "didn't find any matching keys in ${acct}'s authorized_key file, good. ($?)"
          fi
        done

        echo
        echo "Done! ${USER}'s account on ${SERVER} has been disabled, to re-enable run:"
        echo
        echo "${0} ${USER} ${SERVER} enable"
        echo
      else
        echo "ok, left it alone.."
      fi
      exit
  ;;

  "enable")
     ssh root@${SERVER} "[[ -d ~${USER}/.ssh ]] && [[ -d ~${USER}/.ssh_disabled  ]] && mv -f ~${USER}/.ssh ~${USER}/.ssh_${TIME} && echo \"weird, there was an .ssh dir there already, moved to ~${USER}/.ssh_${TIME}\"" 
     ssh root@${SERVER} "[[ -d ~${USER}/.ssh_disabled ]] && mv -f ~${USER}/.ssh_disabled ~${USER}/.ssh"
     ssh root@${SERVER} "usermod --password '${PW}' ${USER}" 
     echo
     echo "${USER} account on ${SERVER} re-enabled, password reset to '${PW}'"
     echo
     echo "NOTE: leaving it up to you to (re)add keys to any additional accounts if necessary"
     echo
     exit
  ;;

  *)
    echo "Ignoring ${OPTIONAL} argument, should be 'delete' if you intended to delete user or 'disable' if you intended to disable the account"
  ;;
esac

$(ssh root@${SERVER} "[[ -d /home/${USER} ]] && exit 3")
if [ "$?" = "3" ]; then
  echo "${USER} already exists on ${SERVER}"
else
  ssh root@${SERVER} "/usr/sbin/useradd -m --password '${PW}' ${USER}" 
  echo "Created account for ${USER}@${SERVER}, password set to '${PW}'"
fi

if [ -f "${KEYDIR}/${USER}.pub" ]; then
  echo "Adding their key from ${KEYDIR}/${USER}.pub"
  cat ${KEYDIR}/${USER}.pub |ssh root@${SERVER} "mkdir -p ~${USER}/.ssh; cat >> ~${USER}/.ssh/authorized_keys && echo "" >> ~${USER}/.ssh/authorized_keys && chown -R ${USER}:${USER} ~${USER}"
else
  echo "No key for ${USER} found in ${KEYDIR}"
fi

